// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package sqlgen

import (
	"context"
	"time"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title, published, author_id
) VALUES (?, ?, ?)
    RETURNING id, title, author_id, published
`

type CreateBookParams struct {
	Title     string
	Published time.Time
	AuthorID  int64
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.Published, arg.AuthorID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.Published,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author_id, published FROM books
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.Published,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author_id, published FROM books
ORDER BY title
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
set title = ?,
    published = ?,
    author_id = ?
WHERE id = ?
    RETURNING id, title, author_id, published
`

type UpdateBookParams struct {
	Title     string
	Published time.Time
	AuthorID  int64
	ID        int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.Title,
		arg.Published,
		arg.AuthorID,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.Published,
	)
	return i, err
}
